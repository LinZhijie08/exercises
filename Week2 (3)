1.在Python中，变量赋值采用对象引用的方式，传递的是一个对象的内存地址（像一个指针）。

2.可以有零个或多个elif零件，else零件是可选的。关键字' elif'是'else if'的缩写，有助于避免过度缩进。一 if... ... elif... ... elif... ...序列的替代switch或 case其它语言中的语句。

3.forPython中的语句与您在C或Pascal中使用的语句略有不同。而不是总是迭代数字的算术级数（如在Pascal中），或者让用户能够定义迭代步骤和暂停条件（如C），Python的for语句迭代任何序列的项目（列表或string），按照它们出现在序列中的顺序

4.给定的终点永远不是生成序列的一部分; range(10)生成10个值，长度为10的序列的项目的合法索引。可以让范围从另一个数字开始，或者指定不同的增量（甚至是负数;有时这称为“步骤”）

5.要遍历序列的索引，您可以组合range()并 len()

6.在许多方面，返回的对象range()表现得好像它是一个列表，但事实上并非如此。它是一个对象，当您迭代它时，它返回所需序列的连续项，但它并不真正使列表，从而节省空间。

7.我们说这样的对象是可迭代的，也就是说，适合作为函数和构造的目标，这些函数和构造期望在供应耗尽之前它们可以从中获得连续的项目。我们已经看到该for语句是一个迭代器。功能list() 是另一个; 它从迭代创建列表

8.在break声明中，类似于C，爆发最内层的 for或while循环。

9.循环语句可能有一个else子句; 当循环通过列表耗尽（with for）或条件变为false（with while）时终止，但是当循环被break语句终止时不执行它。这通过以下循环来举例说明，该循环搜索素数

10.当循环使用，该else条款有更多的共同点与 else一个条款try声明比它认为的 if语句：一个try语句的else时候也不例外条款发生运行和循环的else条款时没有运行break 发生。

11.class collections.Counter（[ iterable-or-mapping ] ）
A Counter是dict用于计算可哈希对象的子类。它是一个无序集合，其中元素存储为字典键，其计数存储为字典值。计数允许为任何整数值，包括零或负计数。该Counter 班是类似于其他语言包或者多集。
元素从可迭代计数或从另一个映射（或计数器）初始化

12.elements（）
返回一个迭代器，重复每个重复次数的元素。元素以任意顺序返回。如果元素的计数小于1，elements()则忽略它。

13.most_common（[ n ] ）
返回n个最常见元素及其计数的列表，从最常见到最少。如果省略nNone，则 most_common()返回计数器中的所有元素。具有相同计数的元素是任意排序的

14.subtract（[ 可迭代或映射] ）
从迭代或从另一个映射 （或计数器）中减去元素。喜欢dict.update()但是减去计数而不是替换它们。输入和输出都可以为零或负数。

15.fromkeys（可迭代的）
Counter对象没有实现此类方法。

16.update（[ 可迭代或映射] ）
元素从可迭代计数或从另一个 映射（或计数器）添加。喜欢dict.update()但是添加计数而不是替换它们。此外，期望迭代是元素序列，而不是对序列。(key, value)

17.计数器主要用于处理正整数以表示运行计数; 但是，注意不要不必要地排除需要其他类型或负值的用例。为帮助处理这些用例，本节介绍了最小范围和类型限制。
在Counter类本身是一本字典的子类，在其键和值没有任何限制。这些值旨在表示计数，但您可以在值字段中存储任何内容。
该most_common()方法仅需要可订购的值。
对于就地操作，例如，值类型只需要支持加法和减法。因此，分数，浮点数和小数将起作用，并且支持负值。同样也是如此 ，并允许负和用于输入和输出的零个值。c[key] += 1update()subtract()
multiset方法仅适用于具有正值的用例。输入可以是负数或零，但仅创建具有正值的输出。没有类型限制，但值类型需要支持加法，减法和比较。
该elements()方法需要整数计数。它忽略了零和负数。

