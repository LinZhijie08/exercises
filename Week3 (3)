如何使用％-formatting
String对象具有使用%运算符的内置操作，您可以使用该操作来格式化字符串。这是实践中的样子：

>>> name  =  “Eric” 
>>> “你好，％s 。”  ％ 名称
“你好，埃里克。”
要插入多个变量，必须使用这些变量的元组。这是你如何做到这一点：

>>> name  =  “Eric” 
>>> 年龄 =  74 
>>> “你好，％s 。你是％s 。”  ％ （姓名， 年龄）
'你好埃里克。你今年74岁。
为什么％-formatting不是很好
您刚才看到的代码示例足够可读。但是，一旦开始使用多个参数和更长的字符串，您的代码将很快变得不那么容易阅读。事情已经开始变得有些混乱了：

>>> first_name  =  “Eric” 
>>> last_name  =  “Idle” 
>>> age  =  74 
>>> profession  =  “comedian” 
>>> affiliation  =  “Monty Python” 
>>> “你好，％s ％s 。你是％S ，你是一个％S ，你是成员％S “。％（first_name ，last_name ，年龄，专业，从属关系）       
“你好，Eric Idle。你是74岁。你是喜剧演员。你是Monty Python的成员。
不幸的是，这种格式化并不是很好，因为它很冗长并导致错误，比如没有正确显示元组或字典。幸运的是，未来还有更光明的日子。

选项＃2：str.format（）
在Python 2.6中引入了这种完成工作的新方法。您可以查看Python文档以获取更多信息。

如何使用str.format（）
str.format()  是％格式化的改进。它使用普通函数调用语法，并且可以通过__format__()对象转换为字符串的方法进行扩展。

使用时str.format()，替换字段用大括号标记：

>>> “你好，{} 。你是{} 。” 。格式（姓名， 年龄）
'你好，埃里克。你今年74岁。
您可以通过引用其索引以任何顺序引用变量：

>>> “你好，{1} 。你是{0} 。” 。格式（年龄， 名字）
'你好，埃里克。你今年74岁。
但是，如果插入变量名称，您将获得能够传递对象，然后在大括号之间引用参数和方法的额外优势：

>>> person  =  { 'name' ： 'Eric' ， 'age' ： 74 } 
>>> “你好，{name} 。你是{age} 。” 。格式（name = person [ 'name' ]， age = person [ 'age' ]）
'你好，Eric。你今年74岁。
您还可以使用**字典来完成这个巧妙的技巧：

>>> person  =  { 'name' ： 'Eric' ， 'age' ： 74 } 
>>> “你好，{name} 。你是{age} 。” 。格式（** 人）
'你好，埃里克。你今年74岁。
str.format() 与％-formatting相比，它肯定是一种升级，但并不是所有的玫瑰和阳光。

为什么str.format（）不是很好
代码使用str.format()比使用％-formatting的代码更容易阅读，但str.format()在处理多个参数和更长的字符串时仍然可能非常冗长。看看这个：

>>> first_name  =  “Eric” 
>>> last_name  =  “Idle” 
>>> age  =  74 
>>> profession  =  “comedian” 
>>> affiliation  =  “Monty Python” 
>>> print （（“Hello，{first_name } {last_name} 。你是{age} 。“ + >>> ”你是{专业} 。你是{affiliation} 的成员。“ ） \
 >>> 。format （first_name = first_name   
              ， last_name = last_name ， age = age ， \
 >>>                profession = profession ， affiliation = affiliation ））
'你好，Eric Idle。你是74岁。你是喜剧演员。你是Monty Python的成员。
如果你想要.format()在字典中传递变量，那么你可以解压缩它.format(**some_dict)并在字符串中按键引用值，但必须有更好的方法来实现这一点。

f-Strings：一种在Python中格式化字符串的新方法
好消息是f字符串可以节省一天。他们切片！他们骰子！他们做切丝炸薯条！好吧，他们没有做这些事情，但他们确实使格式化更容易。他们在Python 3.6中加入了派对。您可以在2015年8月由Eric V. Smith撰写的PEP 498中阅读所有相关内容。

也称为“格式化字符串文字”，f字符串是f在开头有一个字符串文字，包含将用其值替换的表达式的花括号。表达式在运行时进行评估，然后使用__format__协议进行格式化。与往常一样，当您想要了解更多信息时，Python文档就是您的朋友。

以下是f-strings可以让您的生活更轻松的一些方法。

简单的语法
语法类似于您使用的语法，str.format()但不太详细。看看这是多么容易读取：

>>> name  =  “Eric” 
>>> age  =  74 
>>> f “你好，{name} 。你是{age} 。” 
“你好，埃里克。你今年74岁。
使用大写字母也是有效的F：

>>> F “你好，{name} 。你是{age} 。” 
“你好，埃里克。你今年74岁。








functools- 可调用对象的高阶函数和操作

该functools模块用于高阶函数：作用于或返回其他函数的函数。通常，任何可调用对象都可以被视为用于此模块的功能。

该functools模块定义了以下功能：

functools.cmp_to_key（func ）
将旧式比较功能转换为关键功能。使用接受钥匙功能的工具（如sorted()，min()， max()，heapq.nlargest()，heapq.nsmallest()， itertools.groupby()）。此函数主要用作从Python 2转换的程序的转换工具，它支持使用比较函数。

比较函数是任何可调用的，它接受两个参数，比较它们，并返回负数小于，零表示相等，或正数表示大于。键函数是一个可调用的函数，它接受一个参数并返回另一个值作为排序键。

例：sorted(iterable, key=cmp_to_key(locale.strcoll)) 









在Python中，运算符是指定应执行某种计算的特殊符号。操作符所作用的值称为操作数。

一系列操作数和运算符a + b - 5称为表达式。Python支持许多运算符将数据对象组合到表达式中。

标准除法（/）的结果总是a float，即使被除数可被除数整除

当floor division（//）的结果为正时，就好像截断了小数部分，只留下整数部分。当结果为负时，结果向下舍入到下一个最小（更大的负）整数

顺便提一下，请注意，在REPL会话中，只需在>>>提示符下键入表达式即可显示表达式的值，print()与文字值或变量相同

比较运算符通常用于布尔上下文，如条件语句和循环语句，以指导程序流

确定两个浮点值是否“相等”的首选方法是在给定一定容差的情况下计算它们是否彼此接近。

abs()返回绝对值。如果两个数字之间的差值的绝对值小于指定的容差，则它们彼此足够接近以被认为是相等的。

逻辑运算符not，or以及and在布尔上下文中计算的表达式的修改和连接，以创建更复杂的条件。

Python中的一些对象和表达式实际上是布尔类型的。也就是说，它们等于Python对象之一True或False。

